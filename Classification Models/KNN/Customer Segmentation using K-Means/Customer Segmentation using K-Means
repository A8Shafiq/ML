# -*- coding: utf-8 -*-
"""
Created on Tue Nov 26 15:01:22 2024

@author: amr.shafek
"""

import numpy as np 
import pandas as pd 
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.cluster import KMeans

# Data Collection And Analysis 
## Loading Data Set from Excel File and read it using Pands as dataframe

CustomerData = pd.read_csv('Mall_Customers.csv')

# Print All The data after Read it 
print(CustomerData)
#print the first 5 Items on the data set 
print(CustomerData.head())

# Display the length " Size " of data 
print(CustomerData.shape)

# Sow Information about the dataset like datatype etc ..
print (CustomerData.info)

#checking if any nun Value on the data set 
print(CustomerData.isnull().sum())

X = CustomerData.iloc[:,3:5].values
print(X)

#Finding WCSS Value for differant number of Cluster 
#WCSS is Within Clusters sum of Square

wcss = []
for i in range(1,11):
    kmean = KMeans(n_clusters=i,random_state=42)
    kmean.fit(X)
    wcss.append(kmean.inertia_)

# Now lets find the Elbow Point Graph 
sns.set()
plt.plot(range(1,11),wcss)
plt.xlabel("Numbers")
plt.ylabel("WCSS Points ")    
plt.title("Elbow Graph")
plt.show()

# from the plot we can find that the most opimum number of clusters is 5 

kmeans = KMeans(n_clusters=5, init='k-means++', random_state=0)

# return a label for each data point based on their cluster
Y = kmeans.fit_predict(X)

print(Y)


# plotting all the clusters and their Centroids

plt.figure(figsize=(8,8))
plt.scatter(X[Y==0,0], X[Y==0,1], s=50, c='green', label='Cluster 1')
plt.scatter(X[Y==1,0], X[Y==1,1], s=50, c='red', label='Cluster 2')
plt.scatter(X[Y==2,0], X[Y==2,1], s=50, c='yellow', label='Cluster 3')
plt.scatter(X[Y==3,0], X[Y==3,1], s=50, c='violet', label='Cluster 4')
plt.scatter(X[Y==4,0], X[Y==4,1], s=50, c='blue', label='Cluster 5')

# plot the centroids
plt.scatter(kmeans.cluster_centers_[:,0], kmeans.cluster_centers_[:,1], s=100, c='cyan', label='Centroids')

plt.title('Customer Groups')
plt.xlabel('Annual Income')
plt.ylabel('Spending Score')
plt.show()









